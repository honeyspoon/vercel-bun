name: Benchmark

on:
  workflow_dispatch:
    inputs:
      # API Configuration
      bench_api_domain:
        description: "Base URL for the API to benchmark"
        required: false
        default: "https://vercel-bun-bench.vercel.app"
        type: string
      endpoint:
        description: "API endpoint to test"
        required: false
        default: "/api/bun"
        type: choice
        options:
          - "/api/bun"
          - "/api/node"
          - "/api/bun/workload"
          - "/api/node/workload"

      # Test Selection
      run_burst_traffic:
        description: "Run burst traffic test"
        required: false
        default: false
        type: boolean
      run_cold_start:
        description: "Run cold start test"
        required: false
        default: false
        type: boolean
      run_concurrency:
        description: "Run concurrency test"
        required: false
        default: false
        type: boolean
      run_payload_size:
        description: "Run payload size test"
        required: false
        default: false
        type: boolean
      run_throughput:
        description: "Run throughput test"
        required: false
        default: false
        type: boolean
      run_warm_latency:
        description: "Run warm latency test"
        required: false
        default: false
        type: boolean

jobs:
  benchmark:
    runs-on: ubuntu-latest

    env:
      # Endpoint config
      BENCH_API_DOMAIN: ${{ inputs.bench_api_domain }}
      ENDPOINT: ${{ inputs.endpoint }}

      # Warm latency test parameters - increased duration for more stable measurements
      DURATION: "90s"
      RPS: "100"

      # Throughput test parameters - more aggressive testing
      MAX_RPS: "1500"
      RAMP_UP_DURATION: "3m"
      SUSTAIN_DURATION: "5m"

      # Concurrency test parameters - higher load testing
      MAX_CONNECTIONS: "1500"

      # Payload size test parameters - multiple sizes for comprehensive testing
      PAYLOAD_SIZES: "100,1024,10240,102400" # 100B, 1KB, 10KB, 100KB
      ITERATIONS: "100"

      # Burst traffic parameters - more realistic burst patterns
      BURST_REQUESTS: "500"
      BURST_DURATION: "10s"
      BURST_INTENSITY: "100" # RPS during burst

      # Cold start parameters - more comprehensive testing
      COLD_START_WAIT_TIME_MINS: "3"
      COLD_START_ITERATIONS: "10"
      COLD_START_WARMUP_REQUESTS: "5"

      # General test parameters
      THINK_TIME: "0"
      HTTP_TIMEOUT: "30s"
      CONNECTION_TIMEOUT: "10s"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Install dependencies
        run: |
          cd examples/vanilla
          bun install

      - name: Create results directory
        run: |
          cd examples/vanilla
          mkdir -p results

      - name: Prepare endpoint
        run: |
          cd examples/vanilla
          echo "üî• Preparing endpoint"
          bun run bench:prepare

      - name: Run Warm Latency Test
        if: ${{ inputs.run_warm_latency == true }}
        run: |
          cd examples/vanilla
          echo "üî• Running Warm Latency Test"
          bun run bench:warm

      - name: Run Throughput Test
        if: ${{ inputs.run_throughput == true }}
        run: |
          cd examples/vanilla
          echo "üöÄ Running Throughput Test"
          bun run bench:throughput

      - name: Run Concurrency Test
        if: ${{ inputs.run_concurrency == true }}
        run: |
          cd examples/vanilla
          echo "‚ö° Running Concurrency Test"
          bun run bench:concurrency

      - name: Run Payload Size Test
        if: ${{ inputs.run_payload_size == true }}
        run: |
          cd examples/vanilla
          echo "üì¶ Running Payload Size Test"
          bun run bench:payload

      - name: Run Cold Start Test
        if: ${{ inputs.run_cold_start == true }}
        run: |
          cd examples/vanilla
          echo "‚ùÑÔ∏è Running Cold Start Test"
          bun run bench:cold-start

      - name: Run Burst Traffic Test
        if: ${{ inputs.run_burst_traffic == true }}
        run: |
          cd examples/vanilla
          echo "üöÄ Running Burst Traffic Test"
          bun run bench:burst

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_id }}
          path: examples/vanilla/results/
          retention-days: 30
          if-no-files-found: ignore

      - name: Generate Summary Report
        if: always()
        run: |
          cd examples/vanilla
          echo "üìä Generating comprehensive benchmark summary..."
          bun run bench:summary || echo "Summary generation failed, continuing..."

      - name: Summary
        run: |
          echo "‚úÖ Benchmark tests completed!"
          echo "Tests run:"
          ${{ inputs.run_warm_latency == true && 'echo "  - Warm Latency Test (90s duration)"' || 'echo ""' }}
          ${{ inputs.run_throughput == true && 'echo "  - Throughput Test (up to 1500 RPS)"' || 'echo ""' }}
          ${{ inputs.run_concurrency == true && 'echo "  - Concurrency Test (up to 1500 connections)"' || 'echo ""' }}
          ${{ inputs.run_payload_size == true && 'echo "  - Payload Size Test (100B to 100KB)"' || 'echo ""' }}
          ${{ inputs.run_cold_start == true && 'echo "  - Cold Start Test (10 iterations)"' || 'echo ""' }}
          ${{ inputs.run_burst_traffic == true && 'echo "  - Burst Traffic Test (improved pattern)"' || 'echo ""' }}

          echo ""
          echo "üìÅ Results files have been uploaded as artifacts and can be downloaded from the Actions tab."
          echo "üîç Look for individual test result JSON files and summary reports."
